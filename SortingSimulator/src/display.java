
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.util.Random;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Amruth Sagar
 */
public class display extends javax.swing.JFrame {

    String msg="";
    
    public display() {
        initComponents();
        setTitle("SORTING SIMULATOR");
        arraydisplay.setFont(new Font("Courier New", Font.BOLD ,30));
        arraydisplay.setBackground(Color.BLACK);
    }

/**
     * Creates new form display
     */
        /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arraydisplay = new javax.swing.JPanel();
        bubblesort = new javax.swing.JButton();
        initialize = new javax.swing.JButton();
        quicksort = new javax.swing.JButton();
        mergesort = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout arraydisplayLayout = new javax.swing.GroupLayout(arraydisplay);
        arraydisplay.setLayout(arraydisplayLayout);
        arraydisplayLayout.setHorizontalGroup(
            arraydisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        arraydisplayLayout.setVerticalGroup(
            arraydisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 436, Short.MAX_VALUE)
        );

        bubblesort.setText("Bubble Sort");
        bubblesort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bubblesortActionPerformed(evt);
            }
        });

        initialize.setText("Initialize");
        initialize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initializeActionPerformed(evt);
            }
        });

        quicksort.setText("Quick Sort");
        quicksort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quicksortActionPerformed(evt);
            }
        });

        mergesort.setText("Merge Sort");
        mergesort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergesortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(bubblesort)
                .addGap(18, 18, 18)
                .addComponent(quicksort)
                .addGap(18, 18, 18)
                .addComponent(mergesort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 390, Short.MAX_VALUE)
                .addComponent(initialize)
                .addGap(29, 29, 29))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(arraydisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bubblesort, initialize, mergesort, quicksort});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(arraydisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(initialize, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bubblesort, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(quicksort)
                        .addComponent(mergesort)))
                .addGap(19, 19, 19))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bubblesort, initialize, mergesort, quicksort});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /*-------------------------------------------- BUBBLE SORT ALG ------------------------------------------*/
    
    public long bubblesortalg()
    {
        int n = Array.a.length;
        long iterations=0;
        Graphics g=arraydisplay.getGraphics();
        for (int i = 0; i < n-1; i++)
        {
            for (int j = 0; j < n-i-1; j++)
            {
                if (Array.a[j] > Array.a[j+1])
                {
                    // swap temp and arr[i]
                    int temp = Array.a[j];
                    Array.a[j] = Array.a[j+1];
                    Array.a[j+1] = temp;
                    
                    arraydisplay.paint(g);
                    printarray();
                    try{
                    Thread.sleep(15);
                    }
                    catch(InterruptedException e)
                    {
                        System.out.println(e);
                    }
                }
                iterations++;
            }
        }
        return iterations;
    }
    
    /*-----------------------------------------------QUICKSORT-----------------------------------------------------------*/

public class QuickSort 
{
    long iterations=0;
    Graphics g=arraydisplay.getGraphics();
    // Function to partion the array on the basis of the pivot value; 
     int partition(int[] array, int low, int high) {
        int j, temp, i = low + 1;
        Random random = new Random();
        int x = random.nextInt(high - low) + low;
        temp = array[low];
        array[low] = array[x];
        array[x] = temp;
        for (j = low + 1; j <= high; j++) 
        {
            if (array[j] <= array[low] && j != i) 
            {
                temp = array[j];
                array[j] = array[i];
                array[i++] = temp;
            } 
            else if (array[j] <= array[low]) 
            {
                i++;
            }
            iterations++;
            arraydisplay.paint(g);
            printarray();
            try
            {
                Thread.sleep(15);       
            }
            catch(InterruptedException e)
            {
                System.out.println(e);
            }
        }
        temp = array[i - 1];
        array[i - 1] = array[low];
        array[low] = temp;
        return i - 1;
    }
    // Function to implement quick sort
     void quicksortalg(int[] array,int low,int high){
        if(low<high){
            int mid = partition(array,low,high);
            quicksortalg(array,low,mid-1);
            quicksortalg(array,mid+1,high);
        }
    }
}
    

/*---------------------------------------------------------MERGESORT---------------------------------------------------------------*/


class MergeSort 
{ 
    long iterations=0;
    Graphics g=arraydisplay.getGraphics();
    // Merges two subarrays of arr[]. 
    // First subarray is arr[l..m] 
    // Second subarray is arr[m+1..r] 
    void merge(int arr[], int l, int m, int r) 
    { 
        // Find sizes of two subarrays to be merged 
        int n1 = m - l + 1; 
        int n2 = r - m; 
  
        /* Create temp arrays */
        int L[] = new int [n1]; 
        int R[] = new int [n2]; 
  
        /*Copy data to temp arrays*/
        for (int i=0; i<n1; ++i) 
            L[i] = arr[l + i]; 
        for (int j=0; j<n2; ++j) 
            R[j] = arr[m + 1+ j]; 
  
  
        /* Merge the temp arrays */
  
        // Initial indexes of first and second subarrays 
        int i = 0, j = 0; 
  
        // Initial index of merged subarry array 
        int k = l; 
        while (i < n1 && j < n2) 
        { 
            if (L[i] <= R[j]) 
            { 
                arr[k] = L[i]; 
                i++; 
            } 
            else
            { 
                arr[k] = R[j]; 
                j++; 
            } 
            k++;
            iterations++;
            arraydisplay.paint(g);
            printarray();
            try
            {
                Thread.sleep(15);       
            }
            catch(InterruptedException e)
            {
                System.out.println(e);
            }
        } 
  
        /* Copy remaining elements of L[] if any */
        while (i < n1) 
        { 
            arr[k] = L[i]; 
            i++; 
            k++;
            iterations++;
            arraydisplay.paint(g);
            printarray();
            try
            {
                Thread.sleep(15);       
            }
            catch(InterruptedException e)
            {
                System.out.println(e);
            }
        } 
  
        /* Copy remaining elements of R[] if any */
        while (j < n2) 
        { 
            arr[k] = R[j]; 
            j++; 
            k++;
            iterations++;
            arraydisplay.paint(g);
            printarray();
            try
            {
                Thread.sleep(15);       
            }
            catch(InterruptedException e)
            {
                System.out.println(e);
            }
        } 
    } 
  
    // Main function that sorts arr[l..r] using 
    // merge() 
    void sort(int arr[], int l, int r) 
    { 
        if (l < r) 
        { 
            // Find the middle point 
            int m = (l+r)/2; 
  
            // Sort first and second halves 
            sort(arr, l, m); 
            sort(arr , m+1, r); 
  
            // Merge the sorted halves 
            merge(arr, l, m, r); 
        } 
    } 
}




    
    private void bubblesortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bubblesortActionPerformed
        // TODO add your handling code here:
        Graphics g=arraydisplay.getGraphics();
        arraydisplay.paint(g);
        long iterations=bubblesortalg();
        printarray();
        g.setColor(Color.ORANGE);
        msg="Iterations count : "+Long.toString(iterations);
        g.drawString("SORTING ALG: Bubble Sort",10,30);
        g.drawString(msg,10,60);
       
    }//GEN-LAST:event_bubblesortActionPerformed

    private void initializeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initializeActionPerformed
        // TODO add your handling code here:
        Graphics g=arraydisplay.getGraphics();
        arraydisplay.paint(g);
        g.setColor(Color.green);
        g.drawString("Randomly initialized 120 elements of the array ",10,30);
        Array.in_arr();
        printarray();
    }//GEN-LAST:event_initializeActionPerformed

    private void quicksortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quicksortActionPerformed
        // TODO add your handling code here:
        QuickSort qs=new QuickSort();
        qs.quicksortalg(Array.a,0,Array.a.length-1);
        Graphics g=arraydisplay.getGraphics();
        arraydisplay.paint(g);
        printarray();
        g.setColor(Color.ORANGE);
        msg="Iterations count : "+Long.toString(qs.iterations);
        g.drawString("SORTING ALG : Quick Sort",10,30);
        g.drawString(msg,10,60);
        
    }//GEN-LAST:event_quicksortActionPerformed

    private void mergesortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergesortActionPerformed
        // TODO add your handling code here:
        MergeSort ms=new MergeSort();
        ms.sort(Array.a,0,Array.a.length-1);
        Graphics g=arraydisplay.getGraphics();
        arraydisplay.paint(g);
        printarray();
        g.setColor(Color.ORANGE);
        msg="Iterations count : "+Long.toString(ms.iterations);
        g.drawString("SORTING ALG : Merge Sort",10,30);
        g.drawString(msg,10,60);
        
    }//GEN-LAST:event_mergesortActionPerformed

    
    /*-----------------------------------------------PRINTING ARRAY------------------------------------------------*/
  
    
    public void printarray()
    {
        Graphics g=arraydisplay.getGraphics();
        g.setColor(Color.white);
        for(int i=0;i<Array.a.length;i++)
        {
            g.fillRect(10+11*i,600-(Array.a[i]*4),9,Array.a[i]*4);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new display().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel arraydisplay;
    private javax.swing.JButton bubblesort;
    private javax.swing.JButton initialize;
    private javax.swing.JButton mergesort;
    private javax.swing.JButton quicksort;
    // End of variables declaration//GEN-END:variables
}
class Array
{
    static int a[]=new int[120];
    static Random r=new Random();
    public static void in_arr()
    {
        for(int i=0;i<a.length;i++)
        {
            a[i]=1+r.nextInt(120);
        }
    }
}